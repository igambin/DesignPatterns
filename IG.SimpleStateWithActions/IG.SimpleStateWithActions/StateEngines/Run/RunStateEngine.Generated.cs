//  <autogenerated>
//
//      This file was generated by T4 code generator 'StateEngineTamplate.tt'
//
//      Any changes made to this file manually will be lostnext time the file is regenerated.
//
//      As all classes are created as partial classes you can extend these classes by 
//      creating and adapting a matching partial class.
//
//</autogenerated>

using System;
using IG.SimpleStateWithActions.StateEngineShared;
using System.Collections.Generic;
using System.Linq.Expressions;
using IG.SimpleStateWithActions.StateEngineShared.Exceptions;
using IG.SimpleStateWithActions.Models;
using IG.SimpleStateWithActions.StateEngineShared.Interfaces;

namespace IG.SimpleStateWithActions.StateEngines
{
    public interface IRunState : IState<IRunState>
    {
        IRunState Start { get; }
        IRunState Finalize { get; }
        IRunState Cancel { get; }
        IRunState Fail { get; }
        IRunState Reset { get; }
    }

    public abstract class RunState : State<IRunState>, IRunState
    {
        public virtual IRunState Start => UndefinedTransition(nameof(Start));
        public virtual IRunState Finalize => UndefinedTransition(nameof(Finalize));
        public virtual IRunState Cancel => UndefinedTransition(nameof(Cancel));
        public virtual IRunState Fail => UndefinedTransition(nameof(Fail));
        public virtual IRunState Reset => UndefinedTransition(nameof(Reset));
        public override IRunState T_Error(IRunState previousState, Expression<Func<IRunState, IRunState>> attemptedTransition, Exception exception)
            => new RunStates.T_Error() 
                {
                    PreviousState = previousState,
                    AttemptedTransition = attemptedTransition,
                    Exception = exception
                };
    }

    public class RunStates
    {
        public class Initial : RunState, IState<IRunState>
        {
            public override IRunState Start => new RunStates.InProgress();       
        }

        public class InProgress : RunState, IState<IRunState>
        {
            public override IRunState Finalize => new RunStates.Done();       
            public override IRunState Cancel => new RunStates.Cancelled();       
            public override IRunState Fail => new RunStates.Failed();       
        }

        public class Done : RunState, IState<IRunState>
        {
            public override IRunState Reset => new RunStates.Initial();       
        }

        public class Cancelled : RunState, IState<IRunState>
        {
            public override IRunState Reset => new RunStates.Initial();       
        }

        public class Failed : RunState, IState<IRunState>
        {
            public override IRunState Reset => new RunStates.Initial();       
        }

        public class T_Error : RunState, ITechnicalErrorState<IRunState>, IState<IRunState>
        {

            public override IRunState Reset => new RunStates.Initial();       

            public T_Error() {}

            public void InitError(IRunState previousState, Expression<Func<IRunState, IRunState>> attemptedTransition, Exception exception) 
            {
                PreviousState = previousState;
                AttemptedTransition = attemptedTransition;
                Exception = exception;
            }
            public IRunState PreviousState { get; set; }
            public Expression<Func<IRunState, IRunState>> AttemptedTransition { get; set; }
            public Exception Exception { get; set; }
        }

    }

    /// <summary>
    /// 	RunStateController provides Actions that are to be executed on 
    /// 	state transitions. This allows modifications and interactions in
    /// 	and of the stated object when the state is about to change.
    /// </summary>
    public partial class RunStateEngine : StateEngine<Run, IRunState>
    {

        public override List<Transition<Run, IRunState>> Transitions 
            => new List<Transition<Run, IRunState>>
            {
                new Transition<Run, IRunState>(new RunStates.Initial(), state => state.Start, StartRun, null,null),
                new Transition<Run, IRunState>(new RunStates.InProgress(), state => state.Finalize, FinalizeRun, state => state.Fail,null),
                new Transition<Run, IRunState>(new RunStates.InProgress(), state => state.Cancel, null, null,null),
                new Transition<Run, IRunState>(new RunStates.InProgress(), state => state.Fail, null, null,null),
                new Transition<Run, IRunState>(new RunStates.Done(), state => state.Reset, null, null,null),
                new Transition<Run, IRunState>(new RunStates.Cancelled(), state => state.Reset, null, null,null),
                new Transition<Run, IRunState>(new RunStates.Failed(), state => state.Reset, null, null,null),
                new Transition<Run, IRunState>(new RunStates.T_Error(), state => state.Reset, StartCleanup, null,null),
            };

        // NOTE: if a constructor receiving specific dependencies is required, 
        //       defining the required constructor with all required dependencies 
        //       to handle the transitions, e. g. repositories, logger, etc.
        //       in the file RunStateEngine.Partial.cs file
        //
        //       implement the following methods as partial methods in that partial 
        //       class as well in order to satisfy the MethodGroup-Calls in the
        //       transition list above
        private partial bool StartRun(Run run);
        private partial bool FinalizeRun(Run run);
        private partial bool StartCleanup(Run run);
    }
} 

