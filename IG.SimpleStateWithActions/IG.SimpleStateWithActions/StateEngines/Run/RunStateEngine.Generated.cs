//  <autogenerated>
//
//      This file was generated by T4 code generator 'StateEngineTamplate.tt'
//
//      Any changes made to this file manually will be lostnext time the file is regenerated.
//
//      As all classes are created as partial classes you can extend these classes by 
//      creating and adapting a matching partial class.
//
//</autogenerated>

using System;
using IG.SimpleStateWithActions.StateEngineShared;
using System.Collections.Generic;
using System.Linq.Expressions;
using IG.SimpleStateWithActions.StateEngineShared.Exceptions;
using IG.SimpleStateWithActions.Models;

namespace IG.SimpleStateWithActions.StateEngines
{
    public interface IRunState : IState<IRunState>
    {
        IRunState Start { get; }
        IRunState Finalize { get; }
        IRunState Cancel { get; }
        IRunState Fail { get; }
        IRunState Reset { get; }
    }

    public abstract class RunState : State<IRunState>, IRunState
    {
        public virtual IRunState Start => UndefinedTransition("Start");
        public virtual IRunState Finalize => UndefinedTransition("Finalize");
        public virtual IRunState Cancel => UndefinedTransition("Cancel");
        public virtual IRunState Fail => UndefinedTransition("Fail");
        public virtual IRunState Reset => UndefinedTransition("Reset");
    }

    public class RunStates
    {
        public class Initial : RunState, IState<IRunState>
        {
            public override IRunState Start => new RunStates.InProgress();       
        }
        public class InProgress : RunState, IState<IRunState>
        {
            public override IRunState Finalize => new RunStates.Done();       
            public override IRunState Cancel => new RunStates.Cancelled();       
            public override IRunState Fail => new RunStates.Failed();       
        }
        public class Done : RunState, IState<IRunState>
        {
            public override IRunState Reset => new RunStates.Initial();       
        }
        public class Cancelled : RunState, IState<IRunState>
        {
            public override IRunState Reset => new RunStates.Initial();       
        }
        public class Failed : RunState, IState<IRunState>
        {
            public override IRunState Reset => new RunStates.Initial();       
        }
    }

    /// <summary>
    /// 	RunStateController provides Actions that are to be executed on 
    /// 	state transitions. This allows modifications and interactions in
    /// 	and of the stated object when the state is about to change.
    /// </summary>
    public partial class RunStateEngine : StateEngine<Run, IRunState>
    {

        protected override List<
            (
                Type, 
                Expression<Func<IRunState, IRunState>> transition, 
                Action<Run> action,
                Expression<Func<IRunState, IRunState>> transitionOnFail
            )> Transitions
            => new List<(Type, Expression<Func<IRunState, IRunState>> transition, Action<Run> action,
                Expression<Func<IRunState, IRunState>> transitionOnFail)>
            {
                (typeof(RunStates.Initial), state => state.Start, StartRun, null),
                (typeof(RunStates.InProgress), state => state.Finalize, FinalizeRun, state => state.Cancel),
                (typeof(RunStates.InProgress), state => state.Cancel, null, null),
                (typeof(RunStates.InProgress), state => state.Fail, null, null),
                (typeof(RunStates.Done), state => state.Reset, null, null),
                (typeof(RunStates.Cancelled), state => state.Reset, null, null),
                (typeof(RunStates.Failed), state => state.Reset, null, null),
            };

        // NOTE: if a constructor receiving specific dependencies is required, 
        //       defining the required constructor with all required dependencies 
        //       to handle the transitions, e. g. repositories, logger, etc.
        //       in the file RunStateEngine.Partial.cs file
        //
        //       implement the following methods as partial methods in that partial 
        //       class as well in order to satisfy the MethodGroup-Calls in the
        //       transition list above
        partial void StartRun(Run run);
        partial void FinalizeRun(Run run);
    }
} 

